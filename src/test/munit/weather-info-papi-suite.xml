<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="weather-info-papi-suite.xml" />
	<munit:test name="get:\weatherInfo:weather-info-papi-config-address-and-zip-code-test" doc:id="cfa34790-fb37-4e86-bbbb-e7b3d5d748ae" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="43a6e352-f05e-4a84-827f-029325f4b51c" >
				<munit:payload value="#[readUrl('classpath://getweatherinfopapiconfigaddressandzipcodetest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getweatherinfopapiconfigaddressandzipcodetest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getweatherinfopapiconfigaddressandzipcodetest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
			<munit-tools:mock-when doc:name="Mock when Zip or Address Sys API Call" doc:id="ca479eba-239b-4f40-aa3b-12cd06e8e9cf" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Geo Loc Call By Zip or Address" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="dd5cf66e-acc8-44c8-8ab9-639621a7d221" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="HTTP_Geo_Loc_Request_configuration" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${secure::geo-info.path.by.zip}" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('getweatherinfopapiconfigaddressandzipcodetest/geo-info-sys-api-by-address-or-zip-reposne.json')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when Weather Info Sys API Call" doc:id="90df86a8-2721-4875-95b6-710c9e5399db" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Request" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="fb360ebd-ed38-4d6a-bce0-f3443c279daf" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="HTTP_Weather_Info_Request_configuration" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${secure::weather-info.path.weather}" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('getweatherinfopapiconfigaddressandzipcodetest/weather-info-sys-api-response.json')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\weatherInfo:weather-info-papi-config" doc:id="ec700dee-4b1f-4b28-bc6e-f02dd9f1b396" name="get:\weatherInfo:weather-info-papi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ba8991d5-1a1a-4870-b01e-4f0dbb0e16e9" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getweatherinfopapiconfigaddressandzipcodetest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\weatherInfo:weather-info-papi-config-ip-address-test" doc:id="240d1a9f-2f78-428b-a6c5-9f07716a9528" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="65baf777-b876-4ad4-ab65-9b9d99e950a9" >
				<munit:payload value="#[readUrl('classpath://getweatherinfopapiconfigipaddresstest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getweatherinfopapiconfigipaddresstest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getweatherinfopapiconfigipaddresstest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
			<munit-tools:mock-when doc:name="Mock when Zip or Address Sys API Call" doc:id="4e66b523-8baf-4aa3-846a-d28c64c91548" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Geo Loc Call By Ip Address" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="837c41d0-8d9a-4938-aa32-de7e78bdcb30" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="${secure::geo-info.path.by.id}" attributeName="path" />
					<munit-tools:with-attribute whereValue="HTTP_Geo_Loc_Request_configuration" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('getweatherinfopapiconfigipaddresstest/geo-info-sys-api-by-ip-address-reposne.json')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when Weather Info Sys API Call" doc:id="da101d45-f155-481b-aa2a-ca2ee0d946c8" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Request" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="fb360ebd-ed38-4d6a-bce0-f3443c279daf" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="HTTP_Weather_Info_Request_configuration" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${secure::weather-info.path.weather}" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('getweatherinfopapiconfigipaddresstest/weather-info-sys-api-response.json')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\weatherInfo:weather-info-papi-config" doc:id="01e1e9ae-4465-42ea-be6b-2728f5dc9649" name="get:\weatherInfo:weather-info-papi-config" />
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="21199812-8617-47c8-834d-26fd3db46715" message="The payload does not match" >
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getweatherinfopapiconfigipaddresstest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
